"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_middleware_1 = require("../middleware/auth-middleware");
const claim_controller_1 = require("../controllers/claim-controller");
const validation_middleware_1 = require("../middleware/validation-middleware");
const claim_schema_1 = require("../zod/claim-schema");
const claimRouter = (0, express_1.Router)();
claimRouter.post("/", auth_middleware_1.authenticate, (0, validation_middleware_1.validateData)(claim_schema_1.createClaimSchema), claim_controller_1.createClaim);
claimRouter.get("/", auth_middleware_1.authenticate, claim_controller_1.getClaims);
claimRouter.post("/:claimId/accept", auth_middleware_1.authenticate, (0, validation_middleware_1.validateData)(claim_schema_1.acceptClaimSchema), claim_controller_1.acceptClaim);
claimRouter.get("/:id", auth_middleware_1.authenticate, claim_controller_1.getClaim);
claimRouter.put("/:claimId", auth_middleware_1.authenticate, (0, validation_middleware_1.validateData)(claim_schema_1.updateClaimSchema), claim_controller_1.updateClaim);
claimRouter.post("/:claimId/vote", auth_middleware_1.authenticate, claim_controller_1.voteOnClaim);
claimRouter.post("/:claimId/finalize", auth_middleware_1.authenticate, claim_controller_1.finalizeClaim);
claimRouter.post("/:claimId/finalize-with-distribution", auth_middleware_1.authenticate, claim_controller_1.finalizeClaimWithDistribution);
claimRouter.post("/:claimId/payout", auth_middleware_1.authenticate, claim_controller_1.payoutClaim);
claimRouter.post("/:claimId/refund", auth_middleware_1.authenticate, claim_controller_1.refundClaim);
exports.default = claimRouter;
