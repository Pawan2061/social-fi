generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified Boolean     @default(false)
  image         String?
  wallet        String?     @unique
  nonce         String?
  onboarded     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  posts         Post[]
  passes        Ownership[]
  claims        Claim[]
  votes         Vote[]
  pass          Pass?

  @@map("user")
}

model Post {
  id        Int      @id @default(autoincrement())
  creatorId Int
  creator   User     @relation(fields: [creatorId], references: [id])
  caption   String?
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  media Media[]
}

model Media {
  id             Int     @id @default(autoincrement())
  postId         Int?
  post           Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  type           String
  url            String
  thumbnail      String?
  needsSignedUrl Boolean @default(true)
  Claim          Claim?  @relation(fields: [claimId], references: [id])
  claimId        Int?
}

model Pass {
  id            Int      @id @default(autoincrement())
  creatorId     Int      @unique
  creator       User     @relation(fields: [creatorId], references: [id])
  tokenMint     String   @unique
  vault_address String?  @unique
  price         Float
  createdAt     DateTime @default(now())

  ownerships Ownership[]
}

model Ownership {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  passId    Int
  pass      Pass     @relation(fields: [passId], references: [id])
  creatorId Int
  createdAt DateTime @default(now())

  @@unique([userId, passId])
}

model Claim {
  id        Int         @id @default(autoincrement())
  creatorId Int
  creator   User        @relation(fields: [creatorId], references: [id])
  reason    String
  media     Media[]
  amount    Float
  status    ClaimStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  validTill DateTime
  votes     Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  claimId   Int
  claim     Claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  approve   Boolean
  txSig     String
  blockSlot Int?
  createdAt DateTime @default(now())

  @@unique([claimId, userId])
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}
